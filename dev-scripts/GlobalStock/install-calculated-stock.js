#!/usr/bin/env node
/**
 * Script d'Installation Rapide - Stock Calcul√©
 * 
 * Ce script automatise compl√®tement l'installation et la configuration
 * du syst√®me de stock calcul√© pour les d√©veloppeurs.
 * 
 * Usage :
 * node install-calculated-stock.js
 * node install-calculated-stock.js --test-only
 * node install-calculated-stock.js --help
 * 
 * @author Assistant IA
 * @version 1.0
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * Configuration
 */
const CONFIG = {
    scripts: [
        'setup-calculated-stock-system.js',
        'test-setup-script.js'
    ],
    requiredFiles: [
        'schema.prisma',
        '.env'
    ],
    requiredPackages: [
        '@prisma/client'
    ]
};

/**
 * Couleurs pour la console
 */
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

/**
 * Utilitaires de logging
 */
function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
    log(`\n${step} ${message}`, 'cyan');
}

function logSuccess(message) {
    log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
    log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
    log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
    log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

/**
 * V√©rification des pr√©requis
 */
async function checkPrerequisites() {
    logStep('üîç', 'V√©rification des pr√©requis...');
    
    // V√©rifier Node.js
    try {
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
        
        if (majorVersion < 16) {
            logError(`Node.js ${nodeVersion} d√©tect√©. Version 16+ requise.`);
            return false;
        }
        
        logSuccess(`Node.js ${nodeVersion} ‚úì`);
    } catch (error) {
        logError('Impossible de v√©rifier la version de Node.js');
        return false;
    }
    
    // V√©rifier les fichiers requis
    for (const file of CONFIG.requiredFiles) {
        if (!fs.existsSync(file)) {
            logError(`Fichier manquant: ${file}`);
            return false;
        }
        logSuccess(`${file} ‚úì`);
    }
    
    // V√©rifier les packages
    for (const pkg of CONFIG.requiredPackages) {
        try {
            require.resolve(pkg);
            logSuccess(`${pkg} ‚úì`);
        } catch (error) {
            logError(`Package manquant: ${pkg}`);
            logInfo(`Installez avec: npm install ${pkg}`);
            return false;
        }
    }
    
    // V√©rifier Prisma
    try {
        execSync('npx prisma --version', { stdio: 'pipe' });
        logSuccess('Prisma CLI ‚úì');
    } catch (error) {
        logError('Prisma CLI non disponible');
        logInfo('Installez avec: npm install prisma @prisma/client');
        return false;
    }
    
    return true;
}

/**
 * Test de connexion √† la base de donn√©es
 */
async function testDatabaseConnection() {
    logStep('üîå', 'Test de connexion √† la base de donn√©es...');
    
    try {
        const testScript = `
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            
            async function test() {
                try {
                    await prisma.$connect();
                    console.log('CONNECTION_SUCCESS');
                    await prisma.$disconnect();
                } catch (error) {
                    console.error('CONNECTION_ERROR:', error.message);
                    process.exit(1);
                }
            }
            
            test();
        `;
        
        const result = execSync(`node -e "${testScript}"`, { 
            encoding: 'utf8',
            stdio: 'pipe'
        });
        
        if (result.includes('CONNECTION_SUCCESS')) {
            logSuccess('Connexion √† la base de donn√©es ‚úì');
            return true;
        } else {
            logError('√âchec de connexion √† la base de donn√©es');
            return false;
        }
    } catch (error) {
        logError(`Erreur de connexion: ${error.message}`);
        logInfo('V√©rifiez votre fichier .env et que la base de donn√©es est d√©marr√©e');
        return false;
    }
}

/**
 * V√©rification des scripts
 */
function checkScripts() {
    logStep('üìÑ', 'V√©rification des scripts...');
    
    for (const script of CONFIG.scripts) {
        if (!fs.existsSync(script)) {
            logError(`Script manquant: ${script}`);
            return false;
        }
        logSuccess(`${script} ‚úì`);
    }
    
    return true;
}

/**
 * Ex√©cution du script de configuration
 */
async function runSetupScript() {
    logStep('‚öôÔ∏è', 'Ex√©cution de la configuration...');
    
    try {
        const result = execSync('node setup-calculated-stock-system.js', {
            encoding: 'utf8',
            stdio: 'pipe'
        });
        
        console.log(result);
        
        if (result.includes('Configuration termin√©e avec succ√®s') || 
            result.includes('CONFIGURATION R√âUSSIE')) {
            logSuccess('Configuration termin√©e avec succ√®s ‚úì');
            return true;
        } else {
            logWarning('Configuration termin√©e mais v√©rifiez les messages ci-dessus');
            return true; // Continuer quand m√™me
        }
    } catch (error) {
        logError(`Erreur lors de la configuration: ${error.message}`);
        console.log('Sortie compl√®te:', error.stdout);
        return false;
    }
}

/**
 * Ex√©cution des tests
 */
async function runTests() {
    logStep('üß™', 'Ex√©cution des tests de validation...');
    
    try {
        const result = execSync('node test-setup-script.js', {
            encoding: 'utf8',
            stdio: 'pipe'
        });
        
        console.log(result);
        
        if (result.includes('TOUS LES TESTS SONT PASS√âS') || 
            result.includes('Taux de r√©ussite: 100%')) {
            logSuccess('Tous les tests sont pass√©s ‚úì');
            return true;
        } else if (result.includes('Tests r√©ussis:')) {
            logWarning('Certains tests ont des avertissements, mais le syst√®me fonctionne');
            return true;
        } else {
            logError('Certains tests ont √©chou√©');
            return false;
        }
    } catch (error) {
        logError(`Erreur lors des tests: ${error.message}`);
        console.log('Sortie compl√®te:', error.stdout);
        return false;
    }
}

/**
 * Affichage des instructions finales
 */
function showFinalInstructions(success) {
    console.log('\n' + '='.repeat(60));
    
    if (success) {
        log('üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS !', 'green');
        console.log('\nüìã PROCHAINES √âTAPES:');
        console.log('\n1. üîÑ Red√©marrez votre serveur de d√©veloppement');
        console.log('2. üåê Acc√©dez √† votre interface d\'administration');
        console.log('3. üìä V√©rifiez la page de gestion du stock');
        console.log('4. üîÑ Cliquez sur "Actualiser Cache" si disponible');
        console.log('5. üëÄ V√©rifiez que la colonne "Stock Calcul√©" s\'affiche');
        
        console.log('\n‚úÖ FONCTIONNALIT√âS ACTIV√âES:');
        console.log('   ‚Ä¢ Calcul automatique du stock par variant');
        console.log('   ‚Ä¢ Affichage en temps r√©el dans l\'interface');
        console.log('   ‚Ä¢ Gestion des conversions d\'unit√©s');
        console.log('   ‚Ä¢ Cache optimis√© pour les performances');
        
        console.log('\nüìö DOCUMENTATION:');
        console.log('   ‚Ä¢ Guide complet: GUIDE-DEVELOPPEUR-STOCK-CALCULE.md');
        console.log('   ‚Ä¢ Configuration: README-CALCULATED-STOCK-SETUP.md');
        console.log('   ‚Ä¢ Tests: node test-setup-script.js');
        
    } else {
        log('‚ùå INSTALLATION INCOMPL√àTE', 'red');
        console.log('\nüîß ACTIONS REQUISES:');
        console.log('\n1. üìã V√©rifiez les erreurs ci-dessus');
        console.log('2. üîç Consultez le guide: GUIDE-DEVELOPPEUR-STOCK-CALCULE.md');
        console.log('3. üîÑ Relancez ce script apr√®s correction');
        console.log('4. üìû Contactez le support si n√©cessaire');
        
        console.log('\nüÜò COMMANDES DE DEBUG:');
        console.log('   node test-setup-script.js     # Tests d√©taill√©s');
        console.log('   npx prisma db pull            # V√©rifier le sch√©ma');
        console.log('   npx prisma generate           # R√©g√©n√©rer le client');
    }
    
    console.log('\n' + '='.repeat(60));
}

/**
 * Affichage de l'aide
 */
function showHelp() {
    console.log('\nüìñ AIDE - Installation du Stock Calcul√©');
    console.log('=' .repeat(45));
    console.log('\nCe script automatise l\'installation compl√®te du syst√®me');
    console.log('de stock calcul√© pour votre application.');
    console.log('\nUsage:');
    console.log('  node install-calculated-stock.js           # Installation compl√®te');
    console.log('  node install-calculated-stock.js --test-only # Tests seulement');
    console.log('  node install-calculated-stock.js --help     # Afficher cette aide');
    console.log('\n√âtapes automatis√©es:');
    console.log('1. üîç V√©rification des pr√©requis');
    console.log('2. üîå Test de connexion √† la base de donn√©es');
    console.log('3. üìÑ V√©rification des scripts');
    console.log('4. ‚öôÔ∏è  Configuration automatique');
    console.log('5. üß™ Tests de validation');
    console.log('6. üìã Instructions finales');
    console.log('\nPr√©requis:');
    console.log('‚Ä¢ Node.js 16+');
    console.log('‚Ä¢ @prisma/client install√©');
    console.log('‚Ä¢ Base de donn√©es accessible');
    console.log('‚Ä¢ Fichiers schema.prisma et .env pr√©sents');
}

/**
 * Fonction principale
 */
async function main() {
    const args = process.argv.slice(2);
    
    // Gestion des arguments
    if (args.includes('--help') || args.includes('-h')) {
        showHelp();
        return;
    }
    
    const testOnly = args.includes('--test-only');
    
    // En-t√™te
    console.log('\n' + '='.repeat(60));
    log('üöÄ INSTALLATION DU STOCK CALCUL√â', 'cyan');
    console.log('='.repeat(60));
    
    if (testOnly) {
        log('Mode: Tests seulement', 'yellow');
    } else {
        log('Mode: Installation compl√®te', 'green');
    }
    
    let success = true;
    
    try {
        // √âtape 1: Pr√©requis
        if (!await checkPrerequisites()) {
            success = false;
        }
        
        // √âtape 2: Connexion DB
        if (success && !await testDatabaseConnection()) {
            success = false;
        }
        
        // √âtape 3: Scripts
        if (success && !checkScripts()) {
            success = false;
        }
        
        // √âtape 4: Configuration (sauf si test-only)
        if (success && !testOnly) {
            if (!await runSetupScript()) {
                success = false;
            }
        }
        
        // √âtape 5: Tests
        if (success) {
            if (!await runTests()) {
                success = false;
            }
        }
        
        // Instructions finales
        showFinalInstructions(success);
        
    } catch (error) {
        logError(`Erreur inattendue: ${error.message}`);
        success = false;
        showFinalInstructions(false);
    }
    
    process.exit(success ? 0 : 1);
}

// Ex√©cution
if (require.main === module) {
    main();
}

module.exports = {
    main,
    checkPrerequisites,
    testDatabaseConnection,
    runSetupScript,
    runTests
};