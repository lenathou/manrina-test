function usePriceRanges(productId: string) {
    const { data: detailedPrices, isLoading } = useDetailedProductPriceRanges(productId, true);
    
    // Transformer les données en Map par variantId comme attendu par le composant
    const byVariantId = useMemo(() => {
        const map = new Map();
        if (detailedPrices?.variants) {
            detailedPrices.variants.forEach(variant => {
                const prices = variant.growerPrices.map(gp => gp.price).filter(p => p > 0);
                if (prices.length > 0) {
                    const min = Math.min(...prices);
                    const max = Math.max(...prices);
                    map.set(variant.variantId, { min, max });
                } else {
                    map.set(variant.variantId, { min: null, max: null });
                }
            });
        }
        return map;
    }, [detailedPrices]);
    
    return { isLoading, byVariantId };
}

// Composant pour une ligne de produit avec stock global partagÃ©
function ProductRowWithGlobalStock({
    product,
    units,
    allGlobalStocks,
}: {
    product: IProduct;
    units: IUnit[];
    allGlobalStocks?: Record<string, number>;
}) {
    const globalStock = useProductGlobalStockFromCache(product.id, allGlobalStocks);
    const { isLoading: isLoadingPrices, byVariantId } = usePriceRanges(product.id);

    if (!product.variants || product.variants.length === 0) return null;

    return (
        <ProductTable.Row
            key={product.id}
            className={!product.showInStore ? 'text-gray-400' : ''}
            style={!product.showInStore ? { backgroundColor: 'rgba(0,0,0,0.05)', color: 'rgba(0,0,0,0.5)' } : {}}
        >
            {/* Produit */}
            <ProductTable.Cell>
                <div className="flex items-center space-x-3">
                    <AppImage source={product.imageUrl} style={{ width: 50, height: 50, borderRadius: 4 }} alt={product.name} />
                    <div>
                        <span className="font-medium text-gray-900">{product.name}</span>
                        <div className="text-xs text-gray-500">{product.variants.length} variant{product.variants.length > 1 ? 's' : ''}</div>
                    </div>
                </div>
            </ProductTable.Cell>

            {/* Variants (avec prix min-max sous le libellé) */}
            <ProductTable.Cell>
                <div className="space-y-2">
                    {product.variants.map((variant) => {
                        const rng = byVariantId.get(variant.id);
                        const priceText = !rng || rng.min == null || rng.max == null
                            ? '-'
                            : (rng.min === rng.max
                                ? `${rng.min.toFixed(2)} €`
                                : `${rng.min.toFixed(2)} € - ${rng.max.toFixed(2)} €`);
                        return (
                            <div key={variant.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                                <div className="flex flex-col">
                                    <span className="text-sm font-medium">{getDisplayVariantValue(variant, units)}</span>
                                    <span className="text-xs text-gray-500">{isLoadingPrices ? 'Chargement...' : priceText}</span>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </ProductTable.Cell>

            {/* Stock calculé */}
            <ProductTable.Cell>
                <div className="space-y-2">
                    {product.variants.map((variant) => (
                        <VariantCalculatedStock key={variant.id} variant={variant} product={product} units={units} globalStock={globalStock} />
                    ))}
                </div>
            </ProductTable.Cell>

            {/* Stock global */}
            <ProductTable.Cell>
                <div className="flex items-center justify-center h-full">
                    <GlobalStockDisplay variant={product.variants[0]} product={product} globalStock={globalStock} />
                </div>
            </ProductTable.Cell>

            {/* Actions */}
            <ProductTable.Cell>
                <ProductActionsDropdown product={product} units={units} />
            </ProductTable.Cell>

            {/* TVA */}
            <ProductTable.Cell>
                <div className="space-y-2">
                    {product.variants.map((variant) => (
                        <div key={variant.id} className="p-1">
                            <VatRateEditor variant={variant} />
                        </div>
                    ))}
                </div>
            </ProductTable.Cell>

            {/* Description livraison */}
            <ProductTable.Cell>
                <div className="space-y-2">
                    {product.variants.map((variant) => (
                        <div key={variant.id} className="p-1">
                            <ShowDescriptionOnPrintDeliveryEditor variant={variant} />
                        </div>
                    ))}
                </div>
            </ProductTable.Cell>
        </ProductTable.Row>
    );
}/
