const { PrismaClient, Prisma } = require('@prisma/client');

const prisma = new PrismaClient();
const TEST_GROWER_ID = 'ad49dd9b-2186-49a6-abbf-913c594115e1';
const TEST_MARKET_SESSION_ID = 'cmeexp46g0000vlf0qn6exkx9';

async function simulateAPIPost() {
  try {
    console.log('üîç Simulation de l\'API POST /api/grower/stand-products');
    console.log('='.repeat(60));
    
    // Donn√©es de test (exactement comme dans l'API)
    const requestBody = {
      growerId: TEST_GROWER_ID,
      name: 'Produit Test API Simulation',
      description: 'Description du produit test',
      price: 15.50,
      unit: 'kg',
      category: 'L√©gumes',
      marketSessionId: TEST_MARKET_SESSION_ID,
      stock: 10
    };
    
    const { growerId, name, description, imageUrl, price, stock, unit, category, marketSessionId } = requestBody;
    
    console.log('1. Validation des donn√©es...');
    
    // Validation des donn√©es (comme dans l'API)
    if (!growerId || !name || price === undefined || !marketSessionId) {
      console.log('‚ùå Validation √©chou√©e: donn√©es manquantes');
      return;
    }
    
    if (price < 0) {
      console.log('‚ùå Validation √©chou√©e: prix n√©gatif');
      return;
    }
    
    console.log('‚úÖ Validation r√©ussie');
    
    console.log('\n2. V√©rification de l\'existence du produit...');
    
    // V√©rifier si le produit existe d√©j√† dans le stand pour cette session
    const existingStandProduct = await prisma.marketProduct.findFirst({
      where: {
        growerId,
        name,
        marketSessionId
      }
    });
    
    if (existingStandProduct) {
      console.log('‚ùå Produit d√©j√† existant:', existingStandProduct.id);
      return;
    }
    
    console.log('‚úÖ Produit non existant, peut √™tre cr√©√©');
    
    console.log('\n3. V√©rification du producteur et de la session...');
    
    // V√©rifier que le producteur et la session de march√© existent
    const [grower, marketSession] = await Promise.all([
      prisma.grower.findUnique({ where: { id: growerId } }),
      prisma.marketSession.findUnique({ where: { id: marketSessionId } })
    ]);
    
    if (!grower) {
      console.log('‚ùå Producteur non trouv√©');
      return;
    }
    
    if (!marketSession) {
      console.log('‚ùå Session de march√© non trouv√©e');
      return;
    }
    
    console.log('‚úÖ Producteur et session trouv√©s');
    console.log('   - Producteur:', grower.name || 'Nom non d√©fini');
    console.log('   - Session:', marketSession.name);
    
    console.log('\n4. Cr√©ation du produit...');
    
    // Pr√©parer les donn√©es exactement comme dans l'API
    const createData = {
      name,
      description,
      imageUrl,
      price: new Prisma.Decimal(price.toString()),
      stock: stock || 0,
      unit,
      category,
      growerId,
      marketSessionId,
      isActive: true
    };
    
    console.log('Donn√©es de cr√©ation:', JSON.stringify({
      ...createData,
      price: price.toString() // Pour l'affichage
    }, null, 2));
    
    // Cr√©er le produit du stand
    const standProduct = await prisma.marketProduct.create({
      data: createData,
      include: {
        grower: true,
        marketSession: true
      }
    });
    
    console.log('\n‚úÖ Produit cr√©√© avec succ√®s:');
    console.log('ID:', standProduct.id);
    console.log('Nom:', standProduct.name);
    console.log('Prix:', standProduct.price.toString());
    
    // Nettoyer
    await prisma.marketProduct.delete({
      where: { id: standProduct.id }
    });
    console.log('\nüßπ Produit supprim√© pour nettoyage');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la simulation:');
    console.error('Type:', error.constructor.name);
    console.error('Message:', error.message);
    
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      console.error('Code Prisma:', error.code);
      console.error('Meta:', error.meta);
      
      if (error.code === 'P2002') {
        console.log('\nüîç Erreur de contrainte unique d√©tect√©e');
      }
    }
    
    console.error('\nStack trace:');
    console.error(error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

simulateAPIPost();