import React, { useState, useEffect } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { backendFetchService } from '@/service/BackendFetchService';
import { IUnit } from '@/server/product/IProduct';
import { Button } from '@/components/ui/Button';
import { Text } from '@/components/ui/Text';

interface GrowerPriceModalProps {
  isOpen: boolean;
  onClose: () => void;
  product: {
    id: string;
    name: string;
    variants: Array<{
      id: string;
      optionValue: string | null;
      price: number;
      quantity: number | null;
      unitId: string | null;
    }>;
  };
  units: IUnit[];
  growerId: string;
}

export default function GrowerPriceModal({
  isOpen,
  onClose,
  product,
  units,
  growerId
}: GrowerPriceModalProps) {
  const queryClient = useQueryClient();
  const [variantPrices, setVariantPrices] = useState<Record<string, string>>({});
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Initialiser les prix avec les prix actuels du produit
  useEffect(() => {
    if (isOpen && product) {
      console.log('GrowerPriceModal - Product data:', product);
      console.log('GrowerPriceModal - Variants:', product.variants);
      product.variants.forEach(variant => {
        console.log(`Variant ${variant.id}:`, {
          optionValue: variant.optionValue,
          quantity: variant.quantity,
          unitId: variant.unitId,
          price: variant.price
        });
      });
      
      const initialPrices: Record<string, string> = {};
      product.variants.forEach(variant => {
        initialPrices[variant.id] = variant.price.toString();
      });
      setVariantPrices(initialPrices);
      setErrors({});
    }
  }, [isOpen, product]);

  // Fonction pour obtenir le nom d'affichage d'un variant
  const getVariantDisplayName = (variant: typeof product.variants[0]): string => {
    // Si on a quantity et unitId, afficher "quantity unit"
    if (variant.quantity && variant.unitId) {
      const unit = units.find(u => u.id === variant.unitId);
      if (unit) {
        return `${variant.quantity} ${unit.symbol}`;
      }
    }
    
    // Sinon utiliser variantOptionValue
    if (variant.optionValue && variant.optionValue.trim() !== "" && variant.optionValue !== "Default") {
      return variant.optionValue;
    }
    
    // Pour les variants par défaut, afficher le nom du produit
    return product.name;
  };

  // Mutation pour mettre à jour les prix
  const updatePricesMutation = useMutation({
    mutationFn: async () => {
      // Ne mettre à jour que les variants dont le prix a changé
      const entriesToUpdate = product.variants
        .map((v) => ({
          variantId: v.id,
          oldPrice: typeof v.price === 'number' ? v.price : parseFloat(String(v.price)),
          newPriceStr: variantPrices[v.id],
        }))
        .filter((e) => {
          if (e.newPriceStr === undefined || e.newPriceStr === null) return false;
          const newPrice = parseFloat(e.newPriceStr);
          if (isNaN(newPrice)) return false;
          return newPrice !== e.oldPrice;
        });

      if (entriesToUpdate.length === 0) {
        return [] as unknown[];
      }

      const promises = entriesToUpdate.map(({ variantId, newPriceStr }) => {
        const price = parseFloat(newPriceStr!);
        return backendFetchService.updateGrowerProductPrice({
          growerId,
          variantId,
          price,
        });
      });

      return Promise.all(promises);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['grower-stock', growerId] });
      queryClient.invalidateQueries({ queryKey: ['calculateGlobalStock', product.id] });
      onClose();
    },
    onError: (error) => {
      console.error('Erreur lors de la mise à jour des prix:', error);
      setErrors({ general: 'Erreur lors de la mise à jour des prix' });
    }
  });

  const handlePriceChange = (variantId: string, value: string) => {
    setVariantPrices(prev => ({
      ...prev,
      [variantId]: value
    }));
    
    // Supprimer l'erreur pour ce variant si elle existe
    if (errors[variantId]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[variantId];
        return newErrors;
      });
    }
  };

  const validatePrices = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    Object.entries(variantPrices).forEach(([variantId, priceStr]) => {
      const price = parseFloat(priceStr);
      if (isNaN(price) || price < 0) {
        newErrors[variantId] = 'Le prix doit être un nombre positif';
      }
    });
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (validatePrices()) {
      updatePricesMutation.mutate();
    }
  };

  const handleCancel = () => {
    setErrors({});
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4 max-h-[90vh] overflow-y-auto">
        <div className="mb-6">
          <Text variant="h2" className="text-xl font-bold mb-2">
            Gérer les prix
          </Text>
          <Text variant="body" className="text-gray-600">
            {product.name}
          </Text>
        </div>

        {errors.general && (
          <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {errors.general}
          </div>
        )}

        <div className="space-y-4 mb-6">
          {product.variants.map((variant) => (
            <div key={variant.id} className="border border-gray-200 rounded-lg p-4">
              <div className="mb-3">
                <Text variant="body" className="font-medium">
                  {getVariantDisplayName(variant)}
                </Text>
              </div>
              
              <div className="flex items-center space-x-2">
                <input
                  type="number"
                  value={variantPrices[variant.id] || ''}
                  onChange={(e) => handlePriceChange(variant.id, e.target.value)}
                  className={`flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors[variant.id] ? 'border-red-400' : 'border-gray-300'
                  }`}
                  placeholder="Prix"
                  min="0"
                  step="0.01"
                  disabled={updatePricesMutation.isPending}
                />
                <span className="text-gray-500">€</span>
              </div>
              
              {errors[variant.id] && (
                <Text variant="body" className="text-red-600 text-sm mt-1">
                  {errors[variant.id]}
                </Text>
              )}
            </div>
          ))}
        </div>

        <div className="flex justify-end space-x-3">
          <Button
            onClick={handleCancel}
            variant="secondary"
            disabled={updatePricesMutation.isPending}
          >
            Annuler
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={updatePricesMutation.isPending}
          >
            {updatePricesMutation.isPending ? 'Sauvegarde...' : 'Sauvegarder'}
          </Button>
        </div>
      </div>
    </div>
  );
}

