generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String               @id @default(uuid())
  name              String
  description       String?
  imageUrl          String
  category          String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  showInStore       Boolean              @default(true)
  globalStock       Int?                 @default(0)
  baseUnitId        String?
  baseQuantity      Float?               @default(1)
  basketSessionItem BasketSessionItem[]
  growers           GrowerProduct[]
  baseUnit          Unit?                @relation("ProductBaseUnit", fields: [baseUnitId], references: [id])
  variants          ProductVariant[]
  panyenComponents  PanyenComponent[]
  copyHistory       ProductCopyHistory[]

  @@index([baseUnitId])
}

model ProductVariant {
  id                             String              @id @default(uuid())
  optionSet                      String
  optionValue                    String
  productId                      String
  description                    String?
  imageUrl                       String?
  price                          Float
  stock                          Int
  createdAt                      DateTime            @default(now())
  updatedAt                      DateTime            @updatedAt
  vatRate                        Json?
  showDescriptionOnPrintDelivery Boolean?            @default(false)
  unitId                         String?
  quantity                       Float?
  BasketSessionItem              BasketSessionItem[]
  growers                        GrowerProduct[]
  stockUpdates                   GrowerStockUpdate[]
  product                        Product             @relation(fields: [productId], references: [id])
  unit                           Unit?               @relation(fields: [unitId], references: [id])
  stockMovements                 StockMovement[]
  panyenComponents               PanyenComponent[]
}

model BasketSessionItem {
  id               String         @id @default(uuid())
  quantity         Int
  productVariantId String
  basketSessionId  String
  productId        String
  name             String
  price            Float
  description      String?
  refundStatus     String         @default("none")
  basketSession    BasketSession  @relation(fields: [basketSessionId], references: [id])
  Product          Product        @relation(fields: [productId], references: [id])
  product          ProductVariant @relation(fields: [productVariantId], references: [id])
}

model BasketSession {
  id               String              @id @default(uuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  addressId        String?
  deliveryCost     Float
  deliveryDay      String?
  delivered        String?
  retrieved        String?
  customerId       String
  total            Float
  paymentStatus    String              @default("pending")
  orderIndex       Int                 @default(autoincrement())
  rawCustomer      Json?
  deliveryMessage  String?
  walletAmountUsed Float?              @default(0)
  deliveryId       String?
  address          Address?            @relation(fields: [addressId], references: [id])
  customer         Customer            @relation(fields: [customerId], references: [id])
  delivery         Delivery?           @relation(fields: [deliveryId], references: [id])
  items            BasketSessionItem[]
  checkoutSession  CheckoutSession[]

  @@index([orderIndex])
}

model CheckoutSession {
  id              String          @id @default(uuid())
  basketSessionId String
  paymentStatus   String
  paymentAmount   Float
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  successPayload  Json?
  basketSession   BasketSession   @relation(fields: [basketSessionId], references: [id])
  stockMovements  StockMovement[]
}

model Customer {
  id                   String          @id @default(uuid())
  email                String          @unique
  name                 String
  phone                String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  password             String
  passwordResetExpires DateTime?
  passwordResetToken   String?
  address              Address[]
  basketSession        BasketSession[]
  marketAttendances    ClientMarketAttendance[]
}

model Address {
  id            String          @id @default(uuid())
  postalCode    String
  address       String
  city          String
  country       String
  name          String?
  type          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  customerId    String?
  firstName     String?
  lastName      String?
  customer      Customer?       @relation(fields: [customerId], references: [id])
  basketSession BasketSession[]
}

model StockMovement {
  id                String           @id @default(uuid())
  variantId         String
  previousStock     Int
  newStock          Int
  quantity          Int
  type              String
  reason            String?
  checkoutSessionId String?
  adjustedBy        String?
  createdAt         DateTime         @default(now())
  checkoutSession   CheckoutSession? @relation(fields: [checkoutSessionId], references: [id])
  variant           ProductVariant   @relation(fields: [variantId], references: [id])
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductUpdateHistory {
  id        String   @id @default(uuid())
  type      String
  changes   Json
  createdAt DateTime @default(now())
}

model Grower {
  id                   String                    @id @default(uuid())
  name                 String
  profilePhoto         String
  password             String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  email                String                    @unique
  passwordResetExpires DateTime?
  passwordResetToken   String?
  phone                String?
  siret                String?                   @unique
  approved             Boolean                   @default(false)
  approvedAt           DateTime?
  commissionRate       Decimal                   @default(7.0) @db.Decimal(5, 2) // Pourcentage de commission pour les sessions de marché
  deliveryCommissionRate Decimal?                @db.Decimal(5, 2) // Pourcentage de commission pour les livraisons
  bio                  String?                   // Bio du producteur
  assignmentId         String?                   // Affectation de marché choisie
  products             GrowerProduct[]
  productSuggestions   GrowerProductSuggestion[]
  marketProductSuggestions MarketProductSuggestion[]
  stockUpdates         GrowerStockUpdate[]
  participations       MarketParticipation[]
  marketProducts       MarketProduct[]
  growerCommissions    GrowerCommission[]
  assignment           Assignment?               @relation(fields: [assignmentId], references: [id])
}

model GrowerProduct {
  id        String         @id @default(uuid())
  growerId  String
  productId String
  variantId String
  stock     Int
  price     Decimal?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  grower    Grower         @relation(fields: [growerId], references: [id])
  product   Product        @relation(fields: [productId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([growerId, variantId])
}

model GrowerProductSuggestion {
  id          String   @id @default(uuid())
  growerId    String
  name        String
  description String?
  pricing     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  grower      Grower   @relation(fields: [growerId], references: [id])
}

model MarketProductSuggestion {
  id            String   @id @default(uuid())
  growerId      String
  name          String
  description   String?
  pricing       String
  unit          String?
  category      String?
  imageUrl      String?
  status        MarketProductSuggestionStatus @default(PENDING)
  adminComment  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  processedAt   DateTime?
  grower        Grower   @relation(fields: [growerId], references: [id])
}

model GrowerStockUpdate {
  id            String                      @id @default(uuid())
  growerId      String
  variantId     String
  currentStock  Int?
  reason        String
  status        GrowerStockValidationStatus @default(PENDING)
  adminComment  String?
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  newStock      Int
  processedDate DateTime?
  requestDate   DateTime                    @default(now())
  grower        Grower                      @relation(fields: [growerId], references: [id])
  variant       ProductVariant              @relation(fields: [variantId], references: [id])
}

model Unit {
  id               String           @id @default(uuid())
  name             String           @unique
  symbol           String           @unique
  category         String
  baseUnit         String?
  conversionFactor Float?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  productsAsBase   Product[]        @relation("ProductBaseUnit")
  variants         ProductVariant[]
}

model Deliverer {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  password   String
  phone      String?
  vehicle    String?
  zone       String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deliveries Delivery[]

  @@map("deliverers")
}

model Delivery {
  id          String          @id @default(cuid())
  delivererId String?
  status      DeliveryStatus  @default(PENDING)
  scheduledAt DateTime?
  deliveredAt DateTime?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  baskets     BasketSession[]
  deliverer   Deliverer?      @relation(fields: [delivererId], references: [id])

  @@map("deliveries")
}

model PanyenProduct {
  id          String            @id @default(uuid())
  name        String
  description String?
  imageUrl    String
  showInStore Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  price       Float             @default(0)
  components  PanyenComponent[]

  @@map("panyen_products")
}

model PanyenComponent {
  id               String         @id @default(uuid())
  panyenProductId  String
  productId        String
  productVariantId String
  quantity         Int            @default(1)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  panyenProduct    PanyenProduct  @relation(fields: [panyenProductId], references: [id], onDelete: Cascade)
  product          Product        @relation(fields: [productId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("panyen_components")
}

model MarketSession {
  id                    String                @id @default(cuid())
  name                  String
  date                  DateTime
  status                MarketStatus          @default(UPCOMING)
  description           String?
  location              String?
  startTime             DateTime?
  endTime               DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  isAutomatic           Boolean               @default(false)
  recurringDay          Int?
  timezone              String?               @default("America/Martinique")
  autoCreateTime        String?               @default("20:00")
  // Commission configuration
  commissionRate        Decimal               @default(7.0) @db.Decimal(5, 2) // Pourcentage de commission (défaut 7%)
  // Equipment configuration
  tentsStatus           String                @default("none") // Statut des chapiteaux: none, provided, required
  tablesStatus          String                @default("none") // Statut des tables: none, provided, required
  chairsStatus          String                @default("none") // Statut des chaises: none, provided, required
  participations        MarketParticipation[]
  marketProducts        MarketProduct[]
  notifications         Notification[]
  partners              MarketSessionPartner[]
  clientAttendances     ClientMarketAttendance[]
  growerCommissions     GrowerCommission[]

  @@map("market_sessions")
}

model MarketProduct {
  id              String               @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  price           Decimal              @db.Decimal(10, 2)
  stock           Int                  @default(0)
  unit            String?
  category        String?
  isActive        Boolean              @default(true)
  marketSessionId String
  growerId        String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  grower          Grower               @relation(fields: [growerId], references: [id], onDelete: Cascade)
  marketSession   MarketSession        @relation(fields: [marketSessionId], references: [id], onDelete: Cascade)
  copyHistory     ProductCopyHistory[]

  @@map("market_products")
}

model ProductCopyHistory {
  id              String         @id @default(cuid())
  sourceType      CopySourceType
  targetType      CopyTargetType
  sourceProductId String?
  targetProductId String?
  marketProductId String?
  productId       String?
  copiedBy        String
  copiedAt        DateTime       @default(now())
  notes           String?
  marketProduct   MarketProduct? @relation(fields: [marketProductId], references: [id], onDelete: Cascade)
  product         Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_copy_history")
}

model MarketParticipation {
  id          String              @id @default(cuid())
  sessionId   String
  growerId    String
  status      ParticipationStatus @default(PENDING)
  confirmedAt DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  grower      Grower              @relation(fields: [growerId], references: [id], onDelete: Cascade)
  session     MarketSession       @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, growerId])
  @@map("market_participations")
}

model MarketAnnouncement {
  id          String                     @id @default(uuid())
  title       String
  content     String
  publishedAt DateTime                   @default(now())
  priority    MarketAnnouncementPriority @default(MEDIUM)
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  isActive    Boolean                    @default(true)
}



model Permission {
  id             String           @id
  name           String           @unique
  description    String?
  resource       String
  action         String
  createdAt      DateTime         @default(now())
  RolePermission RolePermission[]

  @@unique([resource, action])
}

model RolePermission {
  id           String     @id
  role         Role
  permissionId String
  createdAt    DateTime   @default(now())
  Permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([role, permissionId])
}

model User {
  id        String   @id
  email     String   @unique
  name      String
  password  String?
  role      Role     @default(CLIENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

enum ParticipationStatus {
  PENDING
  CONFIRMED
  DECLINED
  VALIDATED
}

enum GrowerStockValidationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  DELIVERED
  FAILED
}

enum MarketStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MarketProductSuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CopySourceType {
  MARKET
  DELIVERY
}

enum CopyTargetType {
  MARKET
  DELIVERY
}

enum MarketAnnouncementPriority {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  ADMIN
  CLIENT
  PRODUCTEUR
  LIVREUR
}

enum AttendanceStatus {
  PLANNED
  CANCELLED
}

model Notification {
  id          String   @id @default(uuid())
  type        NotificationType
  title       String
  message     String
  marketId    String?
  targetUsers String[] // Array of user IDs or "ALL" for all users
  readBy      String[] // Array of user IDs who have read the notification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?
  isActive    Boolean  @default(true)

  market      MarketSession? @relation(fields: [marketId], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([createdAt])
}

enum NotificationType {
  MARKET_CANCELLATION
  GENERAL_ANNOUNCEMENT
  SYSTEM_MAINTENANCE
  PRODUCT_RECALL
}

model Partner {
  id          String                 @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  website     String?
  email       String?
  phone       String?
  isActive    Boolean                @default(true)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  sessions    MarketSessionPartner[]

  @@map("partners")
}

model MarketSessionPartner {
  id              String        @id @default(uuid())
  marketSessionId String
  partnerId       String
  createdAt       DateTime      @default(now())
  marketSession   MarketSession @relation(fields: [marketSessionId], references: [id], onDelete: Cascade)
  partner         Partner       @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([marketSessionId, partnerId])
  @@map("market_session_partners")
}

model ClientMarketAttendance {
  id              String        @id @default(uuid())
  customerId      String
  marketSessionId String
  status          AttendanceStatus @default(PLANNED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  cancelledAt     DateTime?
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  marketSession   MarketSession @relation(fields: [marketSessionId], references: [id], onDelete: Cascade)

  @@unique([customerId, marketSessionId])
  @@map("client_market_attendance")
}

model GrowerCommission {
  id              String        @id @default(uuid())
  marketSessionId String
  growerId        String
  turnover        Decimal       @db.Decimal(10, 2) // Chiffre d'affaires du producteur pour cette session
  commissionAmount Decimal      @db.Decimal(10, 2) // Montant de la commission calculée
  customCommissionRate Decimal? @db.Decimal(5, 2) // Taux de commission personnalisé pour ce producteur
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  marketSession   MarketSession @relation(fields: [marketSessionId], references: [id], onDelete: Cascade)
  grower          Grower        @relation(fields: [growerId], references: [id], onDelete: Cascade)
  
  @@unique([marketSessionId, growerId])
  @@map("grower_commissions")
}

model Assignment {
  id          String   @id @default(uuid())
  name        String
  description String?
  color       String   @default("#10b981")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  growers     Grower[] // Producteurs assignés à cette affectation

  @@map("assignments")
}
